import paho.mqtt.client as mqtt			
import time					

import dht11
import time
import datetime
from tkinter import *
import tkinter.font
from gpiozero import LED
import RPi.GPIO
RPi.GPIO.setmode(RPi.GPIO.BCM)
import RPi.GPIO as GPIO

led_red=LED(14)
GPIO.setup(11,GPIO.OUT)
servo1 = GPIO.PWM(11,50)
instance = dht11.DHT11(pin=27)

win = Tk()
win.title("INDOOR PLANT MANAGEMENT")
myFont=tkinter.font.Font(family = "Georgia" , size =16 ,weight = "bold")

def ledStart_Motor():
        servo1.start(0)
print ("Motor is turning on")
duty = 2
while duty <= 12:
    servo1.ChangeDutyCycle(duty)
    time.sleep(0.3)
    servo1.ChangeDutyCycle(0)
    time.sleep(0.7)
    duty = duty + 1
servo1.stop()
print ("Motor is off")
        ledButton_Red["text"] = "Turn Motor on"
       
duty = 2;
while duty <= 12:
    servo1.ChangeDutyCycle(duty)
    time.sleep(0.3)
    servo1.ChangeDutyCycle(0)
    time.sleep(0.7)
    duty = duty + 1

def ledTurnOn_Red():
        led_red.on()
        ledButton_Red["text"] = "Turn on LED"

def Temp_Hum():
        try:
	while True:
	    result = instance.read()
	    if result.is_valid():
	        print("Last valid input: " + str(datetime.datetime.now()))

	        print("Temperature: %-3.1f C" % result.temperature)
	        print("Humidity: %-3.1f %%" % result.humidity)

	    time.sleep(3)

def exitFunction():
    RPi.GPIO.cleanup()
    win.destroy()

ledButton_Red = Button(win, text="Turn on LED" ,font =myFont,command =ledTurnOn_Red,bg='red', height =5 , width = 20)
ledButton_Red.grid(row=0,column =0)
    
MotorButton_Green = Button(win, text="Turn Motor on" ,font =myFont,command ledStart_Motor=,bg='green', height =5 , width = 20)
MotorButton_Green.grid(row=0,column =5)

Temp_Hum_Values = Button(win, text="Get Temp Hum Values" ,font =myFont,command =Temp_Hum,bg='yellow', height =5 , width = 20)
Temp_Hum_Values.grid(row=0,column =5)

exitButton = Button(win, text="Exit" ,font =myFont,command =exitFunction,bg="blue", height =3 , width =20)
exitButton.grid(row=1,column =5)


def messageFunction (client, userdata, message):
	topic = str(message.topic)
	message = str(message.payload.decode("utf-8"))
	print(topic + message)
 
 
ourClient = mqtt.Client("makerio_mqtt")		
ourClient.connect("test.mosquitto.org", 1883)	
ourClient.subscribe("photonLog")			
ourClient.on_message = messageFunction
ourClient.on_message = messageFunction		
ourClient.loop_start()				
 

while(1):
	time.sleep(1)				
